services:
  db:
    image: postgres
    volumes:
      - ./app_data/database:/var/team42_app/postgresql/data
    environment:
      - POSTGRES_DB=$SQL_DATABASE
      - POSTGRES_USER=$SQL_USER
      - POSTGRES_PASSWORD=$SQL_PASSWORD
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $SQL_USER -d $SQL_DATABASE" ]
      interval: 5s
      timeout: 5s
      retries: 5
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    command: ./start_prod.sh
    expose:
      - 8080
    volumes:
      - ./app_data/mediafiles:/var/team42_app/mediafiles
      - ./app_data/staticfiles:/var/team42_app/staticfiles
      - ./app_data/import:/var/team42_app/import
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
  nginx:
    build: ./nginx
    volumes:
      - ./app_data/mediafiles:/var/team42_app/mediafiles
      - ./app_data/staticfiles:/var/team42_app/staticfiles
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app
  celery:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    command: ["celery", "--app=core", "worker", "--loglevel=INFO"]
    volumes_from:
      - app:rw
    env_file:
      - .env
    depends_on:
      - redis
  redis:
    image: redis:alpine
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"