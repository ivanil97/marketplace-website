"""
Django settings for django_marketplace project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

from dotenv import load_dotenv


load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", 'django-insecure-@9a=h4+*ds9ohkcfj0svnx7q9&m$x@9@5l(cys7tz#tvqu!duz')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "0") == "1"

ALLOWED_HOSTS = [
    '0.0.0.0',
    '127.0.0.1',
] + os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")
AUTH_USER_MODEL = 'users.User'
"""
AUTH_USER_MODEL = 'users.User' - использовать модель User из приложения users вместо стандартной модели auth.User
"""

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'constance',

    'products.apps.ProductsConfig',
    'users.apps.UsersConfig',
    'vendors.apps.VendorsConfig',
    'reviews.apps.ReviewsConfig',
    'orders.apps.OrdersConfig',
    'comparisons.apps.ComparisonsConfig',
    'adminpanel.apps.AdminpanelConfig',
    'carts.apps.CartsConfig',

    'rest_framework',
    'mptt',
    'django_cleanup.apps.CleanupConfig',
    'debug_toolbar',
    'modeltranslation',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'constance.context_processors.config',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'products.context_processors.list_categories',
                'comparisons.context_processors.comparison_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'
MODELTRANSLATION_DEFAULT_LANGUAGE = 'ru'
TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ('en', _('Английский')),
    ('ru', _('Русский')),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'common_static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'uploads'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/user/account/'

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    EMAIL_HOST_USER = "test@test.ru"
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv("DJANGO_EMAIL_HOST", "")
    EMAIL_USE_TLS = os.getenv("DJANGO_EMAIL_USE_TLS", "1") == 1
    EMAIL_USE_SSL = os.getenv("DJANGO_EMAIL_USE_SSL", "0") == 1
    try:
        EMAIL_PORT = int(os.getenv("DJANGO_EMAIL_PORT", "0"))
    except ValueError:
        EMAIL_PORT = 0
    EMAIL_HOST_USER = os.getenv('DJANGO_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('DJANGO_EMAIL_HOST_PASSWORD')

INTERNAL_IPS = [
    'localhost',
]

if DEBUG:
    import socket
    hostname, alternative_names, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS.append("10.0.2.2")
    INTERNAL_IPS.extend(
        [ip[: ip.rfind(".")] + ".1" for ip in ips]
    )

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

CELERY_BROKER_URL = os.getenv("DJANGO_REDIS_URL", "")
CELERY_RESULT_BACKEND = os.getenv("DJANGO_REDIS_URL", "")

CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True
# CONSTANCE_REDIS_CONNECTION = os.getenv("DJANGO_REDIS_URL", "")
# CONSTANCE_BACKEND = 'constance.backends.redisd.RedisBackend'
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_CONFIG = {
    'CACHES_CATEGORIES': (60 * 60 * 24, 'Cashes categories for catalog in seconds'),
    'CACHES_PRODUCTS': (60 * 60 * 24, 'Cashes products for catalog in seconds'),
    'CACHES_BANNERS': (60 * 10, 'Cashes products for catalog in seconds'),
    'CACHES_SELLERS': (60 * 60 * 24, 'Cashes sellers in seconds'),
    'CACHES_SELLERS_TOP_PRODUCTS': (60 * 60, 'Cashes products for catalog in seconds'),
    'EXPRESS_DELIVERY_COST': (500, 'Cast of express delivery'),
    'FREE_DELIVERY_MINIMAL_COST': (2000, 'Minimal cast for free delivery'),
    'DELIVERY_COST': (200, 'Cast of simple delivery'),
    'FOR_COUNT': (6, 'Discount for cart dependence from count cart'),
    'FOR_COUNT_PERCENT': (5, 'Percent for count products in cart'),
    'FOR_PRICE': (500, 'Discount for cart dependence from total price cart'),
    'FOR_PRICE_PERCENT': (5, 'Percent for total price in cart')
}
CONSTANCE_CONFIG_FIELDSETS = (
    (
        'caches',
        {
            'fields':
            (
                'CACHES_CATEGORIES',
                'CACHES_PRODUCTS',
                'CACHES_BANNERS',
                'CACHES_SELLERS',
                'CACHES_SELLERS_TOP_PRODUCTS',
             ),
            'collapse': False,
        },
    ),
    (
        'delivery',
        {
            'fields':
            (
                'EXPRESS_DELIVERY_COST',
                'FREE_DELIVERY_MINIMAL_COST',
                'DELIVERY_COST',
            ),
            'collapse': False,
        },
    ),
    (
        'discounts',
        {
            'fields':
                (
                    'FOR_COUNT',
                    'FOR_COUNT_PERCENT',
                    'FOR_PRICE',
                    'FOR_PRICE_PERCENT',
                ),
            'collapse': False,
        }
    ),
)

# Вывод логов в консоли по SQL запросам
# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true',],
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console',],
#         }
#     }
# }
